# Import
from dotenv import load_dotenv
load_dotenv(r"C:\Users\liznm\.vscode\ml_engineer_test\.env")

from crewai import Crew
from tasks import Tasks
from agents import Agents
import agentops
import streamlit as st
from streamlit_option_menu import option_menu
from pathlib import Path

def main():
    st.markdown("<h1 style='text-align: center;color: black;'>HR Agent Platform <span>ðŸ¤–</span></h1>",
                unsafe_allow_html=True)
    selected = option_menu(
        menu_title=None,
        options=["About", "HR Agent Platform"],
        icons=["house-door-fill", "bi bi-display"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
        styles={"nav-link-selected": {"background-color": "#55248d"}}
    )

    if selected == "About":
        st.subheader("Welcome to Our HR Agent Platform!")
        st.markdown("""Harness the power of AI to streamline your hiring process with our cutting-edge platform. Our system is powered by three specialized AI agents designed to simplify and enhance every step of recruitment:

- **Recruiter Agent:** Acts as a Senior Tech Recruiter, using its expertise to find the best candidates based on job requirements. This agent specializes in LinkedIn searches, ensuring a tailored and efficient candidate discovery process.

- **Review Agent:** A meticulous editor that reviews and refines the candidate list, ensuring all key information is present and accurate. It filters out candidates lacking essential details, leaving you with the top prospects.

- **Interview Agent:** Crafts personalized interview questions for each candidate based on their profiles and job requirements. This agent ensures that your interviews are targeted, comprehensive, and effective.

Let our AI agents take the hassle out of hiring, so you can focus on choosing the right candidate for your team.""")
        
    if selected == "HR Agent Platform":
        st.subheader("Fill the form below: ")

        with st.form(key="form_1", clear_on_submit=False):
            job_title = st.text_input("Job Title:", )
            brief_description = st.text_area("Brief Description:", )
            required_skills = st.text_area("Required Skills: ",)
            differential_skills = st.text_area("Differential Skills: ",)
            location = st.text_input("Location: ",)
            submit_button = st.form_submit_button("Submit")
        
        if submit_button:

            with st.spinner('Searching...'):

                # Define tasks and agents
                tasks = Tasks()
                agents = Agents()

                # Create Agents
                recruiter_agent = agents.recruiter_agent()
                review_agent = agents.review_agent()
                interview_agent = agents.interview_agent()

                # Define Tasks for each agent
                research_potencial_candidates_task = tasks.research_potencial_candidates_task(recruiter_agent, job_title, brief_description, required_skills, differential_skills, location)
                review_potencial_candidates_task = tasks.review_potencial_candidates_task(review_agent, location)
                generate_job_interview_question_task = tasks.generate_job_interview_question_task(interview_agent, job_title, brief_description, required_skills, differential_skills)

                # Initiate an AgentOps session to  track Crew agents
                agentops.init()

                # Create crew
                crew = Crew(
                agents=[
                        recruiter_agent,
                        review_agent,
                        interview_agent],

                tasks=[
                        research_potencial_candidates_task,
                        review_potencial_candidates_task,
                        generate_job_interview_question_task]
                        )

                # Start the process
                crew.kickoff()


                # Show the results provided by the review_agent
                with open(r"C:\Users\liznm\.vscode\ml_engineer_test\potencial_candidates.md") as f:
                    markdown_string = f.read()
                st.markdown(markdown_string)

                # Download the file with the interview questions generated by the interview_agent
                with open(r'C:\Users\liznm\.vscode\ml_engineer_test\interview_questions.doc') as f:
                    st.download_button('ðŸ“¥ Click to download the interview questions!', file_name="interview_questions.doc", data=f)

if __name__ == '__main__':
    main()

